package fr.unice.polytech.si3.ps5.teamb.diceforge.game.exploit.card;

import static org.junit.Assert.assertTrue;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;

import java.util.Map;

import org.junit.Before;
import org.junit.Test;

import fr.unice.polytech.si3.ps5.teamb.diceforge.bot.player.OnlyDice;
import fr.unice.polytech.si3.ps5.teamb.diceforge.bot.player.OnlyDice2;
import fr.unice.polytech.si3.ps5.teamb.diceforge.game.Inventory;
import fr.unice.polytech.si3.ps5.teamb.diceforge.game.Player;
import fr.unice.polytech.si3.ps5.teamb.diceforge.game.Resources;

/**
 * CardTest
 */
public class CardTest {

    Player bot;
    Player bot2;
    Inventory inv;

    @Before
    public void setup() {
        bot = new OnlyDice();
        bot2 = new OnlyDice2();
        inv = new Inventory();
        inv.basicSet();
    }

    @Test
    public void cancerTest() {
        Card c = new Cancer(5, 5, 5);
        assertTrue("Cancer".equals(c.toString()));
        c.playImmEffect(inv);
        Map<Resources, Integer> res = c.hasResourcesToStore();
        assertTrue(res.size() != 0);
        res = c.hasResourcesToStore();
        assertTrue(res.size() == 0);
    }

    @Test
    public void ferrymanTest() {
        Card c = new Ferryman(5, 5, 5);
        assertTrue("Ferryman".equals(c.toString()));
        assertEquals(5, c.getVictoryPoints());
        assertEquals(5, c.getMoonStone());
        assertEquals(5, c.getSunStone());
    }

    @Test
    public void gordonTest() {
        Card c = new Gorgon(5, 5, 5);
        assertTrue("Gorgon".equals(c.toString()));
        assertEquals(5, c.getVictoryPoints());
        assertEquals(5, c.getMoonStone());
        assertEquals(5, c.getSunStone());
    }

    @Test
    public void hydreaTest() {
        Card c = new Hydra(5, 5, 5);
        assertTrue("Hydra".equals(c.toString()));
        assertEquals(5, c.getVictoryPoints());
        assertEquals(5, c.getMoonStone());
        assertEquals(5, c.getSunStone());
    }

    @Test
    public void sphynxTest() {
        Card c = new Sphynx(5, 5, 5);
        c.setCardOwner(bot);
        assertTrue("Sphynx".equals(c.toString()));
        c.playImmEffect(inv);
        Map<Resources, Integer> res = c.hasResourcesToStore();
        assertTrue(res.size() != 0);
        res = c.hasResourcesToStore();
        assertTrue(res.size() == 0);
    }

    @Test
    public void wildSpiritTest() {
        Card c = new WildSpirits(5, 5, 5);
        assertTrue("Wild Spirits".equals(c.toString()));
        c.playImmEffect(inv);
        Map<Resources, Integer> res = c.hasResourcesToStore();
        System.out.println(res);
        assertEquals(3, (int) res.get(Resources.GOLD));
        assertEquals(3, (int) res.get(Resources.MOON_STONE));
    }

    @Test
    public void blackSmithHammerTest() {
        BlacksmithHammer c = new BlacksmithHammer(1, 0, 0);
        c.setCardOwner(bot);
        assertTrue("The Blacksmith's Hammer".equals(c.toString()));
        assertTrue(c.hasAfterEffect(inv));
        assertFalse(c.isHammerDone());
        assertEquals(0, c.runHammerEffect(10));
        assertFalse(c.isHammerDone());
        c.setCardOwner(bot2);
        assertEquals(10, c.runHammerEffect(10));
        assertFalse(c.isHammerDone());
        c.setCardOwner(bot);
        assertEquals(0, c.runHammerEffect(20));
        assertTrue(c.isHammerDone());
    }

    @Test
    public void sentinelTest() {
        Sentinel c = new Sentinel(6, 0, 6);
        assertTrue("Sentinel".equals(c.toString()));
        c.setCardOwner(bot2);
        c.playImmEffect(inv);
        Map<Resources, Integer> res = c.hasResourcesToStore();
        assertTrue(res.size() != 0);
        res = c.hasResourcesToStore();
        assertTrue(res.size() == 0);
    }

}