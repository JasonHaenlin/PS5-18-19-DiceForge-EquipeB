package fr.unice.polytech.si3.ps5.teamb.diceforge.game.exploit.card;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import fr.unice.polytech.si3.ps5.teamb.diceforge.game.Inventory;
import fr.unice.polytech.si3.ps5.teamb.diceforge.game.Resources;
import fr.unice.polytech.si3.ps5.teamb.diceforge.game.forge.dice.side.DiceSide;
import fr.unice.polytech.si3.ps5.teamb.diceforge.game.util.TuplePair;

/**
 * Sentinel
 */
public class Sentinel extends Card {

    public Sentinel(int moonStone, int sunStone, int victoryPoints) {
        super(moonStone, sunStone, victoryPoints);
    }

    // TODO test
    @Override
    public void playImmEffect(Inventory inv) {
        DiceSide side1;
        DiceSide side2;
        for (int i = 0; i < 4; i += 2) {
            side1 = inv.rolldice(i % 2);
            side2 = inv.rolldice((i + 1) % 2);
            List<TuplePair<Resources, Integer>> tuples = new ArrayList<>();
            tuples.addAll(side1.executeInstructions(side2, cardOwner));
            tuples.addAll(side2.executeInstructions(side1, cardOwner));
            tuples.forEach(t -> {
                Resources r = t.type;
                if (r.equals(Resources.SUN_STONE) || r.equals(Resources.SUN_STONE))
                    r = cardOwner.callBackResources(mapOf(r, t.value));
                updateResources(r, t.value);
            });
        }
    }

    private Map<Resources, Integer> mapOf(Resources r, Integer value) {
        Map<Resources, Integer> map = new HashMap<>();
        map.put(r, value);
        return map;
    }

    @Override
    public String toString() {
        return CardEnum.SENTINEL.toString();
    }

}