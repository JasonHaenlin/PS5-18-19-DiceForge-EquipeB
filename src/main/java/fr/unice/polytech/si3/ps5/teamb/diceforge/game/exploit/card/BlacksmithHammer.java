package fr.unice.polytech.si3.ps5.teamb.diceforge.game.exploit.card;

import fr.unice.polytech.si3.ps5.teamb.diceforge.game.Inventory;
import fr.unice.polytech.si3.ps5.teamb.diceforge.game.Resources;

public class BlacksmithHammer extends Card {

    private static final int FIRST_PRIZE = 10;
    private static final int SECOND_PRIZE = 15;
    private static final int NUMBER_OF_CELLS = 30;

    private int currentSquare = 0;

    public BlacksmithHammer(int moonStone, int sunStone, int victoryPoints) {
        super(moonStone, sunStone, victoryPoints);
    }

    @Override
    public boolean hasAfterEffect(Inventory inv) {
        inv.addHammerEffect(this);
        return true;
    }

    /**
     * hammer effect need, special card
     * 
     * @param amount
     * @return
     */
    public int runHammerEffect(int amount) {
        if (isHammerDone())
            return amount;
        // we don't want any loss
        int total = currentSquare + amount;
        int offset = total > 30 ? total - NUMBER_OF_CELLS : 0;
        int amountUsed = cardOwner.callBackHammer(amount - offset);
        currentSquare += amountUsed;
        logger.debug("Le bot '" + cardOwner.toString() + "' depense " + amountUsed + " pour le marteau : "
                + currentSquare + "/" + NUMBER_OF_CELLS / 2);
        checkHammer();
        return amount - amountUsed;
    }

    private void checkHammer() {
        switch (currentSquare) {
        case NUMBER_OF_CELLS / 2:
            updateResources(Resources.VICTORY_POINT, FIRST_PRIZE);
            logger.debug("Le bot '" + cardOwner.toString() + "' 1ere partie du marteau fini");
            break;
        case NUMBER_OF_CELLS:
            updateResources(Resources.VICTORY_POINT, SECOND_PRIZE);
            logger.debug("Le bot '" + cardOwner.toString() + "' 2eme partie du marteau fini");
            break;
        }
    }

    public boolean isHammerDone() {
        return currentSquare >= NUMBER_OF_CELLS;
    }

    public int goldNeededBeforeCompletion() {
        return isHammerDone() ? 0 : currentSquare % NUMBER_OF_CELLS;
    }

    @Override
    public String toString() {
        return CardEnum.BLACKSMITH_HAMMER.toString();
    }
}
