package fr.unice.polytech.si3.ps5.teamb.diceforge.game.exploit;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import fr.unice.polytech.si3.ps5.teamb.diceforge.game.exploit.card.Card;

/**
 * Islands
 */
public class Islands {

    private static Logger logger = LogManager.getLogger(Island.class);

    private static final int MAX_ISLAND_COST = 5;
    private List<Island> island;

    public Islands(List<Card> exploitConfig) {
        putInIsland(exploitConfig);
    }

    private void putInIsland(List<Card> exploitConfig) {
        island = new ArrayList<>();
        createIslands(new ArrayList<>(exploitConfig));
    }

    private void createIslands(List<Card> exploitConfig) {
        List<Card> cardm;
        List<Card> cards;
        for (int i = 1; i <= MAX_ISLAND_COST; i++) {
            cardm = new ArrayList<>();
            cards = new ArrayList<>();
            int k = 0;
            while (k < exploitConfig.size()) {
                if (exploitConfig.get(k).getMoonStone() == i && exploitConfig.get(k).getSunStone() == 0) {
                    cardm.add(exploitConfig.get(k));
                    exploitConfig.remove(k);
                } else if (exploitConfig.get(k).getSunStone() == i && exploitConfig.get(k).getMoonStone() == 0) {
                    cards.add(exploitConfig.get(k));
                    exploitConfig.remove(k);
                } else {
                    k++;
                }
            }
            if (!cardm.isEmpty())
                island.add(new Island(cardm));
            if (!cards.isEmpty())
                island.add(new Island(cards));
        }
        island.add(new Island(exploitConfig));
    }

    /**
     * retrieve the available cards based on the moon and sun currency
     * 
     * @param moonBank
     * @param sunBank
     * @return the list of cards
     */
    public List<Card> getBuyableCards(int moonBank, int sunBank) {
        ArrayList<Card> buyable = new ArrayList<>();
        for (Island isl : island) {
            logger.trace("[ISLAND] " + isl.toString());
            for (Card card : isl) {
                if (card.getMoonStone() <= moonBank && card.getSunStone() <= sunBank) {
                    buyable.add(card);
                }
            }
        }
        buyable.sort((Card a1, Card a2) -> Integer.compare(a1.getMoonStone() + a1.getSunStone(),
                a2.getMoonStone() + a2.getSunStone()));
        logger.trace("[ISLANDS] " + buyable.toString());
        return buyable.isEmpty() ? Collections.emptyList() : buyable;
    }

    /**
     * remove a card from the islands
     * 
     * @param card
     * @return true if the card has been removed, false otherwise
     */
    public boolean removeCard(Card card) {
        for (Island isl : island) {
            if (isl.contains(card)) {
                return isl.remove(card);
            }
        }
        return false;
    }
}