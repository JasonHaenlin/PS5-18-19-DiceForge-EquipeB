package fr.unice.polytech.si3.ps5.teamb.diceforge.game.exploit;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import fr.unice.polytech.si3.ps5.teamb.diceforge.game.exploit.card.Card;

/**
 * Islands
 */
public class Islands {

    private List<Island> island;

    public Islands(List<Card> exploitConfig) {
        putInIsland(exploitConfig);
    }

    // TODO change this method to sort exploit by island with the cost of the cards
    private boolean putInIsland(List<Card> exploitConfig) {
        island = new ArrayList<>();
        return island.add(new Island(exploitConfig));
    }

    /**
     * retrieve the available cards based on the moon and sun currency
     * 
     * @param moonBank
     * @param sunBank
     * @return the list of cards
     */
    public List<Card> getBuyableCards(int moonBank, int sunBank) {
        ArrayList<Card> buyable = new ArrayList<>();
        for (Island isl : island) {
            for (Card card : isl) {
                if (card.getMoonStone() <= moonBank && card.getSunStone() <= sunBank) {
                    buyable.add(card);
                }
            }
        }
        buyable.sort((Card a1, Card a2) -> Integer.compare(a1.getMoonStone() + a1.getSunStone(),
                a2.getMoonStone() + a2.getSunStone()));

        return buyable.isEmpty() ? Collections.emptyList() : buyable;
    }

    /**
     * remove a card from the islands
     * 
     * @param card
     * @return true if the card has been removed, false otherwise
     */
    public boolean removeCard(Card card) {
        for (Island isl : island) {
            if (isl.contains(card)) {
                return isl.remove(card);
            }
        }
        return false;
    }
}